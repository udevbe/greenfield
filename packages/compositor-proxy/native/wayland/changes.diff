diff -urN src/wayland-upstream/connection.c src/wayland-server/connection.c
--- src/wayland-upstream/connection.c	2022-04-06 21:48:54.614859405 +0200
+++ src/wayland-server/connection.c	2022-03-21 16:32:26.793496221 +0100
@@ -285,7 +285,7 @@
 	return 0;
 }
 
-int
+WL_EXPORT int
 wl_connection_flush(struct wl_connection *connection)
 {
 	struct iovec iov[2];
@@ -374,7 +374,7 @@
 	return wl_connection_pending_input(connection);
 }
 
-int
+WL_EXPORT int
 wl_connection_write(struct wl_connection *connection,
 		    const void *data, size_t count)
 {
@@ -426,7 +426,7 @@
 	return connection->fd;
 }
 
-static int
+WL_EXPORT int
 wl_connection_put_fd(struct wl_connection *connection, int32_t fd)
 {
 	if (ring_buffer_size(&connection->fds_out) == MAX_FDS_OUT * sizeof fd) {
@@ -1375,3 +1375,18 @@
 	wl_closure_close_fds(closure);
 	free(closure);
 }
+
+WL_EXPORT size_t
+wl_connection_fds_in_size(struct wl_connection *connection)
+{
+	return ring_buffer_size(&connection->fds_in);
+}
+
+WL_EXPORT void
+wl_connection_copy_fds_in(struct wl_connection *connection, int *fds_in, size_t size)
+{
+	if (size == 0)
+		return;
+	ring_buffer_copy(&connection->fds_in, fds_in, size);
+	connection->fds_in.tail += size;
+}
diff -urN src/wayland-upstream/wayland-os.c src/wayland-server/wayland-os.c
--- src/wayland-upstream/wayland-os.c	2022-04-06 21:48:54.622859417 +0200
+++ src/wayland-server/wayland-os.c	2022-03-21 16:32:26.793496221 +0100
@@ -25,8 +25,6 @@
 
 #define _GNU_SOURCE
 
-#include "../config.h"
-
 #include <sys/types.h>
 #include <sys/socket.h>
 #include <unistd.h>
@@ -228,7 +226,7 @@
  */
 void *
 wl_os_mremap_maymove(int fd, void *old_data, ssize_t *old_size,
-		     ssize_t new_size, int prot, int flags)
+		     ssize_t new_size, int prot, int flags, int keep_mapping)
 {
 	void *result;
 	/*
@@ -243,7 +241,7 @@
 	if (result != MAP_FAILED) {
 		/* Copy the data over and unmap the old mapping. */
 		memcpy(result, old_data, *old_size);
-		if (munmap(old_data, *old_size) == 0) {
+		if (!keep_mapping && munmap(old_data, *old_size) == 0) {
 			*old_size = 0; /* successfully unmapped old data. */
 		}
 	}
diff -urN src/wayland-upstream/wayland-os.h src/wayland-server/wayland-os.h
--- src/wayland-upstream/wayland-os.h	2022-04-06 21:48:54.618859411 +0200
+++ src/wayland-server/wayland-os.h	2022-03-21 16:32:26.793496221 +0100
@@ -49,7 +49,7 @@
 
 void *
 wl_os_mremap_maymove(int fd, void *old_data, ssize_t *old_size,
-		     ssize_t new_size, int prot, int flags);
+		     ssize_t new_size, int prot, int flags, int keep_mapping);
 
 
 /*
diff -urN src/wayland-upstream/wayland-server.c src/wayland-server/wayland-server.c
--- src/wayland-upstream/wayland-server.c	2022-04-06 21:48:54.626859424 +0200
+++ src/wayland-server/wayland-server.c	2022-03-21 19:36:40.330256709 +0100
@@ -49,6 +49,7 @@
 #include "wayland-server-private.h"
 #include "wayland-server.h"
 #include "wayland-os.h"
+#include "westfield-extra.h"
 
 /* This is the size of the char array in struct sock_addr_un.
  * No Wayland socket can be created with a path longer than this,
@@ -84,6 +85,9 @@
 	gid_t gid;
 	int error;
 	struct wl_priv_signal resource_created_signal;
+	wl_connection_wire_message_t wire_message_cb;
+	wl_connection_wire_message_end_t wire_message_end_cb;
+	wl_registry_created_t registry_created_cb;
 };
 
 struct wl_display {
@@ -109,6 +113,9 @@
 
 	int terminate_efd;
 	struct wl_event_source *term_source;
+
+	wl_global_cb_t global_created_cb;
+	wl_global_cb_t global_destroyed_cb;
 };
 
 struct wl_global {
@@ -337,6 +344,7 @@
 	uint32_t resource_flags;
 	int opcode, size, since;
 	int len;
+	int32_t *buffer;
 
 	if (mask & WL_EVENT_HANGUP) {
 		wl_client_destroy(client);
@@ -379,6 +387,18 @@
 
 		resource = wl_map_lookup(&client->objects, p[0]);
 		resource_flags = wl_map_lookup_flags(&client->objects, p[0]);
+
+		if (client->wire_message_cb) {
+			buffer = malloc((size_t) size);
+			wl_connection_copy(connection, buffer, (size_t) size);
+
+			if (client->wire_message_cb(client, buffer, (size_t) size, p[0], opcode) == 0) {
+				wl_connection_consume(connection, (size_t) size);
+				len = wl_connection_pending_input(connection);
+				continue;
+			}
+		}
+
 		if (resource == NULL) {
 			wl_resource_post_error(client->display_resource,
 					       WL_DISPLAY_ERROR_INVALID_OBJECT,
@@ -452,7 +472,9 @@
 	if (client->error) {
 		destroy_client_with_error(client,
 					  "error in client communication");
-	}
+	} else if (client->wire_message_end_cb) {
+        client->wire_message_end_cb(client);
+    }
 
 	return 1;
 }
@@ -997,6 +1019,7 @@
 	wl_list_insert(&display->registry_resource_list,
 		       &registry_resource->link);
 
+/*
 	wl_list_for_each(global, &display->global_list, link)
 		if (wl_global_is_visible(client, global) && !global->removed)
 			wl_resource_post_event(registry_resource,
@@ -1004,8 +1027,13 @@
 					       global->name,
 					       global->interface->name,
 					       global->version);
+*/
+	if (client->registry_created_cb) {
+		client->registry_created_cb(client, registry_resource, id);
+	}
 }
 
+
 static const struct wl_display_interface display_interface = {
 	display_sync,
 	display_get_registry
@@ -1251,6 +1279,10 @@
 	global->removed = false;
 	wl_list_insert(display->global_list.prev, &global->link);
 
+	if (display->global_created_cb) {
+		display->global_created_cb(display, global->name);
+	}
+
 	wl_list_for_each(resource, &display->registry_resource_list, link)
 		wl_resource_post_event(resource,
 				       WL_REGISTRY_GLOBAL,
@@ -1293,6 +1325,10 @@
 			 "global '%s@%"PRIu32"'", global->interface->name,
 			 global->name);
 
+	if (display->global_destroyed_cb) {
+		display->global_destroyed_cb(display, global->name);
+	}
+
 	wl_list_for_each(resource, &display->registry_resource_list, link)
 		wl_resource_post_event(resource, WL_REGISTRY_GLOBAL_REMOVE,
 				       global->name);
@@ -1825,9 +1861,10 @@
 	resource = malloc(sizeof *resource);
 	if (resource == NULL)
 		return NULL;
-
+/*
 	if (id == 0)
 		id = wl_map_insert_new(&client->objects, 0, NULL);
+*/
 
 	resource->object.id = id;
 	resource->object.interface = interface;
@@ -2327,3 +2364,79 @@
  * code here, add it before the comment above that states:
  * Deprecated functions below.
  */
+
+/* Lastly: westfield specifics */
+WL_EXPORT struct wl_connection *
+wl_client_get_connection(struct wl_client *client)
+{
+	return client->connection;
+}
+
+WL_EXPORT void
+wl_client_set_wire_message_cb(struct wl_client *client, wl_connection_wire_message_t wire_message_cb)
+{
+	client->wire_message_cb = wire_message_cb;
+}
+
+WL_EXPORT void
+wl_client_set_wire_message_end_cb(struct wl_client *client, wl_connection_wire_message_end_t wire_message_end_cb)
+{
+	client->wire_message_end_cb = wire_message_end_cb;
+}
+
+WL_EXPORT void
+wl_registry_emit_globals(struct wl_resource *registry_resource)
+{
+	struct wl_global *global;
+	struct wl_client *client = registry_resource->client;
+	struct wl_display *display = client->display;
+
+	wl_list_for_each(global, &display->global_list, link)
+		if (wl_global_is_visible(client, global))
+			wl_resource_post_event(registry_resource,
+				WL_REGISTRY_GLOBAL,
+				global->name,
+				global->interface->name,
+				global->version);
+}
+
+WL_EXPORT void
+wl_client_set_registry_created_cb(struct wl_client *client, wl_registry_created_t registry_created_cb)
+{
+	client->registry_created_cb = registry_created_cb;
+}
+
+WL_EXPORT void
+wl_display_set_global_created_cb(struct wl_display *display, wl_global_cb_t global_created_cb)
+{
+	display->global_created_cb = global_created_cb;
+}
+
+WL_EXPORT void
+wl_display_set_global_destroyed_cb(struct wl_display *display, wl_global_cb_t global_destroyed_cb)
+{
+	display->global_destroyed_cb = global_destroyed_cb;
+}
+
+WL_EXPORT void
+wl_get_server_object_ids_batch(struct wl_client *client, uint32_t *ids, uint32_t amount)
+{
+	for (int i = 0; i < amount; ++i) {
+		ids[i] = wl_map_insert_new(&client->objects, 0, NULL);
+	}
+}
+
+WL_EXPORT void
+wl_resource_destroy_silently(struct wl_resource *resource)
+{
+	struct wl_client *client = resource->client;
+	uint32_t id;
+	uint32_t flags;
+
+	id = resource->object.id;
+	flags = wl_map_lookup_flags(&client->objects, id);
+	destroy_resource(resource, NULL, flags);
+
+	// browser compositor server side resources ids are recycled in the browser compositor, hence we don't make the ids available, and just NULL the resource
+	wl_map_insert_at(&client->objects, 0, id, NULL);
+}
diff -urN src/wayland-upstream/wayland-server-private.h src/wayland-server/wayland-server-private.h
--- src/wayland-upstream/wayland-server-private.h	1970-01-01 01:00:00.000000000 +0100
+++ src/wayland-server/wayland-server-private.h	2022-03-21 16:32:26.793496221 +0100
@@ -0,0 +1,53 @@
+/*
+ * Copyright © 2008-2011 Kristian Høgsberg
+ * Copyright © 2011 Intel Corporation
+ * Copyright © 2013 Jason Ekstrand
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining
+ * a copy of this software and associated documentation files (the
+ * "Software"), to deal in the Software without restriction, including
+ * without limitation the rights to use, copy, modify, merge, publish,
+ * distribute, sublicense, and/or sell copies of the Software, and to
+ * permit persons to whom the Software is furnished to do so, subject to
+ * the following conditions:
+ *
+ * The above copyright notice and this permission notice (including the
+ * next paragraph) shall be included in all copies or substantial
+ * portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ * NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
+ * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
+ * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ */
+
+#ifndef WAYLAND_SERVER_PRIVATE_H
+#define WAYLAND_SERVER_PRIVATE_H
+
+#include "wayland-server-core.h"
+
+struct wl_priv_signal {
+	struct wl_list listener_list;
+	struct wl_list emit_list;
+};
+
+void
+wl_priv_signal_init(struct wl_priv_signal *signal);
+
+void
+wl_priv_signal_add(struct wl_priv_signal *signal, struct wl_listener *listener);
+
+struct wl_listener *
+wl_priv_signal_get(struct wl_priv_signal *signal, wl_notify_func_t notify);
+
+void
+wl_priv_signal_emit(struct wl_priv_signal *signal, void *data);
+
+void
+wl_priv_signal_final_emit(struct wl_priv_signal *signal, void *data);
+
+#endif
diff -urN src/wayland-upstream/wayland-shm.c src/wayland-server/wayland-shm.c
--- src/wayland-upstream/wayland-shm.c	2022-04-06 21:48:54.626859424 +0200
+++ src/wayland-server/wayland-shm.c	2022-03-21 16:32:26.797496208 +0100
@@ -30,8 +30,6 @@
 
 #define _GNU_SOURCE
 
-#include "config.h"
-
 #include <stdbool.h>
 #include <stdio.h>
 #include <stdlib.h>
@@ -58,6 +56,12 @@
 static pthread_key_t wl_shm_sigbus_data_key;
 static struct sigaction wl_shm_old_sigbus_action;
 
+struct wl_shm_pool_mapping {
+	struct wl_list link;
+	char *data;
+	int32_t size;
+};
+
 struct wl_shm_pool {
 	struct wl_resource *resource;
 	int internal_refcount;
@@ -70,6 +74,8 @@
 	int mmap_flags;
 	int mmap_prot;
 	bool sigbus_is_impossible;
+    /* list of struct wl_shm_pool_mapping */
+    struct wl_list mappings;
 };
 
 /** \class wl_shm_buffer
@@ -102,11 +108,11 @@
 	void *data;
 
 #ifdef MREMAP_MAYMOVE
-	data = mremap(pool->data, pool->size, pool->new_size, MREMAP_MAYMOVE);
+	data = mremap(pool->data, pool->external_refcount ? 0 : pool->size, pool->new_size, MREMAP_MAYMOVE);
 #else
 	data = wl_os_mremap_maymove(pool->mmap_fd, pool->data, &pool->size,
 				    pool->new_size, pool->mmap_prot,
-				    pool->mmap_flags);
+				    pool->mmap_flags, pool->external_refcount > 0);
 	if (pool->size != 0) {
 		wl_resource_post_error(pool->resource,
 				       WL_SHM_ERROR_INVALID_FD,
@@ -117,33 +123,21 @@
 }
 
 static void
-shm_pool_finish_resize(struct wl_shm_pool *pool)
-{
-	void *data;
-
-	if (pool->size == pool->new_size)
-		return;
-
-	data = shm_pool_grow_mapping(pool);
-	if (data == MAP_FAILED) {
-		wl_resource_post_error(pool->resource,
-				       WL_SHM_ERROR_INVALID_FD,
-				       "failed mremap");
-		return;
-	}
-
-	pool->data = data;
-	pool->size = pool->new_size;
-}
-
-static void
 shm_pool_unref(struct wl_shm_pool *pool, bool external)
 {
-	if (external) {
+    struct wl_shm_pool_mapping *mapping, *tmp_mapping;
+
+    if (external) {
 		pool->external_refcount--;
 		assert(pool->external_refcount >= 0);
-		if (pool->external_refcount == 0)
-			shm_pool_finish_resize(pool);
+		if (pool->external_refcount == 0) {
+			wl_list_for_each_safe(mapping, tmp_mapping, &pool->mappings, link) {
+				munmap(mapping->data, mapping->size);
+				wl_list_remove(&mapping->link);
+				free(mapping);
+			}
+			wl_list_init(&pool->mappings);
+		}
 	} else {
 		pool->internal_refcount--;
 		assert(pool->internal_refcount >= 0);
@@ -270,23 +264,43 @@
 		int32_t size)
 {
 	struct wl_shm_pool *pool = wl_resource_get_user_data(resource);
+	struct wl_shm_pool_mapping *mapping;
+	void *data;
 
 	if (size < pool->size) {
 		wl_resource_post_error(resource,
-				       WL_SHM_ERROR_INVALID_FD,
-				       "shrinking pool invalid");
+							   WL_SHM_ERROR_INVALID_FD,
+							   "shrinking pool invalid");
 		return;
 	}
 
 	pool->new_size = size;
 
-	/* If the compositor has taken references on this pool it
-	 * may be caching pointers into it. In that case we
-	 * defer the resize (which may move the entire mapping)
-	 * until the compositor finishes dereferencing the pool.
+
+	if (pool->size == pool->new_size)
+		return;
+
+	data = shm_pool_grow_mapping(pool);
+
+	/*
+	 * keep track of previous mappings, we clean them up once the pool external_refcount drops to zero.
 	 */
-	if (pool->external_refcount == 0)
-		shm_pool_finish_resize(pool);
+	if(pool->external_refcount && data != pool->data) {
+		mapping = malloc(sizeof(struct wl_shm_pool_mapping));
+		mapping->data = pool->data;
+		mapping->size = pool->size;
+		wl_list_insert(&pool->mappings, &mapping->link);
+	}
+
+	if (data == MAP_FAILED) {
+		wl_resource_post_error(pool->resource,
+								WL_SHM_ERROR_INVALID_FD,
+								"failed mremap");
+		return;
+	}
+
+	pool->data = data;
+	pool->size = pool->new_size;
 }
 
 static const struct wl_shm_pool_interface shm_pool_interface = {
@@ -356,6 +370,7 @@
 		free(pool);
 		return;
 	}
+	wl_list_init(&pool->mappings);
 
 	wl_resource_set_implementation(pool->resource,
 				       &shm_pool_interface,
diff -urN src/wayland-upstream/westfield-extra.h src/wayland-server/westfield-extra.h
--- src/wayland-upstream/westfield-extra.h	1970-01-01 01:00:00.000000000 +0100
+++ src/wayland-server/westfield-extra.h	2022-03-21 19:36:14.118346551 +0100
@@ -0,0 +1,82 @@
+/*
+ * Copyright © 2018 Erik De Rijcke
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining
+ * a copy of this software and associated documentation files (the
+ * "Software"), to deal in the Software without restriction, including
+ * without limitation the rights to use, copy, modify, merge, publish,
+ * distribute, sublicense, and/or sell copies of the Software, and to
+ * permit persons to whom the Software is furnished to do so, subject to
+ * the following conditions:
+ *
+ * The above copyright notice and this permission notice (including the
+ * next paragraph) shall be included in all copies or substantial
+ * portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ * NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
+ * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
+ * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ */
+
+#define _GNU_SOURCE
+
+#include "wayland-server.h"
+
+struct wl_connection;
+
+size_t
+wl_connection_fds_in_size(struct wl_connection *connection);
+
+void
+wl_connection_copy_fds_in(struct wl_connection *connection, int *fds_in, size_t fds_in_size);
+
+int
+wl_connection_put_fd(struct wl_connection *connection, int32_t fd);
+
+int
+wl_connection_write(struct wl_connection *connection,
+                    const void *data, size_t count);
+
+int
+wl_connection_flush(struct wl_connection *connection);
+
+struct wl_connection *
+wl_client_get_connection(struct wl_client *client);
+
+typedef int (*wl_connection_wire_message_t)(struct wl_client *client, int32_t *wire_message,
+                                            size_t wire_message_size, int object_id, int opcode);
+
+void
+wl_client_set_wire_message_cb(struct wl_client *client, wl_connection_wire_message_t wire_message_cb);
+
+typedef void (*wl_connection_wire_message_end_t)(struct wl_client *client);
+
+void
+wl_client_set_wire_message_end_cb(struct wl_client *client, wl_connection_wire_message_end_t wire_message_end_cb);
+
+typedef void (*wl_registry_created_t)(struct wl_client *client, struct wl_resource *registry, uint32_t registry_id);
+
+void
+wl_client_set_registry_created_cb(struct wl_client *client, wl_registry_created_t registry_created_cb);
+
+void
+wl_registry_emit_globals(struct wl_resource *registry_resource);
+
+typedef void (*wl_global_cb_t)(struct wl_display *display, uint32_t name);
+
+void
+wl_display_set_global_created_cb(struct wl_display *display, wl_global_cb_t global_created_cb);
+
+void
+wl_display_set_global_destroyed_cb(struct wl_display *display, wl_global_cb_t global_destroyed_cb);
+
+void
+wl_resource_destroy_silently(struct wl_resource *resource);
+
+void
+wl_get_server_object_ids_batch(struct wl_client *client, uint32_t *ids, uint32_t amount);
\ No newline at end of file
