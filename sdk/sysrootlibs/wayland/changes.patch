diff --git a/cursor/os-compatibility.c b/cursor/os-compatibility.c
index f2445ce..076d3e8 100644
--- a/cursor/os-compatibility.c
+++ b/cursor/os-compatibility.c
@@ -115,7 +115,7 @@ create_tmpfile_cloexec(char *tmpname)
  * XDG_RUNTIME_DIR.
  */
 int
-os_create_anonymous_file(off_t size)
+__os_create_anonymous_file__(off_t size)
 {
 	static const char template[] = "/wayland-cursor-shared-XXXXXX";
 	const char *path;
@@ -157,7 +157,7 @@ os_create_anonymous_file(off_t size)
 			return -1;
 	}
 
-	if (os_resize_anonymous_file(fd, size) < 0) {
+	if (__os_resize_anonymous_file__(fd, size) < 0) {
 		close(fd);
 		return -1;
 	}
@@ -166,7 +166,7 @@ os_create_anonymous_file(off_t size)
 }
 
 int
-os_resize_anonymous_file(int fd, off_t size)
+__os_resize_anonymous_file__(int fd, off_t size)
 {
 #ifdef HAVE_POSIX_FALLOCATE
 	sigset_t mask;
diff --git a/cursor/os-compatibility.h b/cursor/os-compatibility.h
index fdfeb78..01559cf 100644
--- a/cursor/os-compatibility.h
+++ b/cursor/os-compatibility.h
@@ -29,9 +29,9 @@
 #include <sys/types.h>
 
 int
-os_create_anonymous_file(off_t size);
+__os_create_anonymous_file__(off_t size);
 
 int
-os_resize_anonymous_file(int fd, off_t size);
+__os_resize_anonymous_file__(int fd, off_t size);
 
 #endif /* OS_COMPATIBILITY_H */
diff --git a/cursor/wayland-cursor.c b/cursor/wayland-cursor.c
index 156f0a8..5035414 100644
--- a/cursor/wayland-cursor.c
+++ b/cursor/wayland-cursor.c
@@ -57,7 +57,7 @@ shm_pool_create(struct wl_shm *shm, int size)
 	if (!pool)
 		return NULL;
 
-	pool->fd = os_create_anonymous_file(size);
+	pool->fd = __os_create_anonymous_file__(size);
 	if (pool->fd < 0)
 		goto err_free;
 
@@ -83,7 +83,7 @@ err_free:
 static int
 shm_pool_resize(struct shm_pool *pool, int size)
 {
-	if (os_resize_anonymous_file(pool->fd, size) < 0)
+	if (__os_resize_anonymous_file__(pool->fd, size) < 0)
 		return 0;
 
 	wl_shm_pool_resize(pool->pool, size);
diff --git a/meson.build b/meson.build
index 558c7ac..86a2ed1 100644
--- a/meson.build
+++ b/meson.build
@@ -80,8 +80,6 @@ if get_option('libraries')
 	ffi_dep = dependency('libffi')
 
 	decls = [
-		{ 'header': 'sys/signalfd.h', 'symbol': 'SFD_CLOEXEC' },
-		{ 'header': 'sys/timerfd.h', 'symbol': 'TFD_CLOEXEC' },
 		{ 'header': 'time.h', 'symbol': 'CLOCK_MONOTONIC' },
 	]
 
diff --git a/src/meson.build b/src/meson.build
index a8a1d2b..bdbd587 100644
--- a/src/meson.build
+++ b/src/meson.build
@@ -105,16 +105,6 @@ if get_option('libraries')
 	)
 
 	generated_headers = [
-		{
-			'scanner_args': ['server-header'],
-			'output': 'wayland-server-protocol.h',
-			'install': true,
-		},
-		{
-			'scanner_args': ['server-header', '-c'],
-			'output': 'wayland-server-protocol-core.h',
-			'install': false,
-		},
 		{
 			'scanner_args': ['client-header'],
 			'output': 'wayland-client-protocol.h',
@@ -164,59 +154,7 @@ if get_option('libraries')
 		# is an ABI break, at which point we should probably bump the SONAME of
 		# all libraries to .so.2. For more details see
 		# https://gitlab.freedesktop.org/wayland/wayland/-/merge_requests/177
-		error('We probably need to bump the SONAME of libwayland-server and -client')
-	endif
-
-	wayland_server = library(
-		'wayland-server',
-		sources: [
-			wayland_server_protocol_core_h,
-			wayland_server_protocol_h,
-			wayland_protocol_c,
-			'wayland-server.c',
-			'wayland-shm.c',
-			'event-loop.c'
-		],
-		# To avoid an unnecessary SONAME bump, wayland 1.x.y produces
-		# libwayland-server.so.0.x.y.
-		version: '.'.join(['0', wayland_version[1], wayland_version[2]]),
-		dependencies: [
-			epoll_dep,
-			ffi_dep,
-			wayland_private_dep,
-			wayland_util_dep,
-			mathlib_dep,
-			threads_dep,
-			rt_dep
-		],
-		include_directories: root_inc,
-		install: true
-	)
-
-	wayland_server_dep = declare_dependency(
-		link_with: wayland_server,
-		include_directories: [ root_inc, include_directories('.') ],
-		dependencies: [ epoll_dep, ffi_dep, mathlib_dep, threads_dep ],
-		sources: [
-			wayland_server_protocol_core_h,
-			wayland_server_protocol_h
-		]
-	)
-
-	pkgconfig.generate(
-		wayland_server,
-		name: 'Wayland Server',
-		description: 'Server side implementation of the Wayland protocol',
-		version: meson.project_version(),
-		filebase: 'wayland-server',
-		variables: [
-			'datarootdir=' + join_paths('${prefix}', get_option('datadir')),
-			'pkgdatadir=' + join_paths('${datarootdir}', meson.project_name())
-		]
-	)
-
-	if meson.version().version_compare('>= 0.54.0')
-		meson.override_dependency('wayland-server', wayland_server_dep)
+		error('We probably need to bump the SONAME of libwayland-client')
 	endif
 
 	wayland_client = library(
@@ -269,8 +207,6 @@ if get_option('libraries')
 
 	install_headers([
 		'wayland-util.h',
-		'wayland-server.h',
-		'wayland-server-core.h',
 		'wayland-client.h',
 		'wayland-client-core.h',
 	])
diff --git a/src/wayland-os.c b/src/wayland-os.c
index a9066ca..a5526d3 100644
--- a/src/wayland-os.c
+++ b/src/wayland-os.c
@@ -33,7 +33,9 @@
 #include <fcntl.h>
 #include <errno.h>
 #include <string.h>
+#ifndef __EMSCRIPTEN__
 #include <sys/epoll.h>
+#endif
 #include <sys/mman.h>
 #include <sys/un.h>
 #ifdef HAVE_SYS_UCRED_H
@@ -79,6 +81,7 @@ wl_os_socket_cloexec(int domain, int type, int protocol)
 	return set_cloexec_or_close(fd);
 }
 
+#ifndef __EMSCRIPTEN__
 #if defined(__FreeBSD__)
 int
 wl_os_socket_peercred(int sockfd, uid_t *uid, gid_t *gid, pid_t *pid)
@@ -118,6 +121,7 @@ wl_os_socket_peercred(int sockfd, uid_t *uid, gid_t *gid, pid_t *pid)
 #else
 #error "Don't know how to read ucred on this platform"
 #endif
+#endif
 
 int
 wl_os_dupfd_cloexec(int fd, int minfd)
@@ -188,6 +192,7 @@ wl_os_recvmsg_cloexec(int sockfd, struct msghdr *msg, int flags)
 	return recvmsg_cloexec_fallback(sockfd, msg, flags);
 }
 
+#ifndef __EMSCRIPTEN__
 int
 wl_os_epoll_create_cloexec(void)
 {
@@ -250,3 +255,4 @@ wl_os_mremap_maymove(int fd, void *old_data, ssize_t *old_size,
 
 	return result;
 }
+#endif
diff --git a/src/wayland-os.h b/src/wayland-os.h
index 068fd2f..39acc4b 100644
--- a/src/wayland-os.h
+++ b/src/wayland-os.h
@@ -32,8 +32,10 @@
 int
 wl_os_socket_cloexec(int domain, int type, int protocol);
 
+#ifndef __EMSCRIPTEN__
 int
 wl_os_socket_peercred(int sockfd, uid_t *uid, gid_t *gid, pid_t *pid);
+#endif
 
 int
 wl_os_dupfd_cloexec(int fd, int minfd);
@@ -41,6 +43,7 @@ wl_os_dupfd_cloexec(int fd, int minfd);
 ssize_t
 wl_os_recvmsg_cloexec(int sockfd, struct msghdr *msg, int flags);
 
+#ifndef __EMSCRIPTEN__
 int
 wl_os_epoll_create_cloexec(void);
 
@@ -50,7 +53,7 @@ wl_os_accept_cloexec(int sockfd, struct sockaddr *addr, socklen_t *addrlen);
 void *
 wl_os_mremap_maymove(int fd, void *old_data, ssize_t *old_size,
 		     ssize_t new_size, int prot, int flags);
-
+#endif
 
 /*
  * The following are for wayland-os.c and the unit tests.
