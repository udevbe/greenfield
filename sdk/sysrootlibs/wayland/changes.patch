diff --git a/cursor/meson.build b/cursor/meson.build
index f7d82e4..e492b6a 100644
--- a/cursor/meson.build
+++ b/cursor/meson.build
@@ -16,7 +16,6 @@ wayland_cursor = library(
 	'wayland-cursor',
 	sources: [
 		'wayland-cursor.c',
-		'os-compatibility.c',
 		'xcursor.c',
 	],
 	# To avoid an unnecessary SONAME bump, wayland 1.x.y produces
diff --git a/cursor/os-compatibility.c b/cursor/os-compatibility.c
deleted file mode 100644
index f2445ce..0000000
--- a/cursor/os-compatibility.c
+++ /dev/null
@@ -1,203 +0,0 @@
-/*
- * Copyright Â© 2012 Collabora, Ltd.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * The above copyright notice and this permission notice (including the
- * next paragraph) shall be included in all copies or substantial
- * portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
- * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
- * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
- * SOFTWARE.
- */
-
-#define _GNU_SOURCE
-
-#include "config.h"
-
-#include <sys/types.h>
-#include <unistd.h>
-#include <fcntl.h>
-#include <errno.h>
-#include <signal.h>
-#include <string.h>
-#include <stdio.h>
-#include <stdlib.h>
-
-#ifdef HAVE_MEMFD_CREATE
-#include <sys/mman.h>
-#endif
-
-#include "os-compatibility.h"
-
-#ifndef HAVE_MKOSTEMP
-static int
-set_cloexec_or_close(int fd)
-{
-	long flags;
-
-	if (fd == -1)
-		return -1;
-
-	flags = fcntl(fd, F_GETFD);
-	if (flags == -1)
-		goto err;
-
-	if (fcntl(fd, F_SETFD, flags | FD_CLOEXEC) == -1)
-		goto err;
-
-	return fd;
-
-err:
-	close(fd);
-	return -1;
-}
-#endif
-
-static int
-create_tmpfile_cloexec(char *tmpname)
-{
-	int fd;
-
-#ifdef HAVE_MKOSTEMP
-	fd = mkostemp(tmpname, O_CLOEXEC);
-	if (fd >= 0)
-		unlink(tmpname);
-#else
-	fd = mkstemp(tmpname);
-	if (fd >= 0) {
-		fd = set_cloexec_or_close(fd);
-		unlink(tmpname);
-	}
-#endif
-
-	return fd;
-}
-
-/*
- * Create a new, unique, anonymous file of the given size, and
- * return the file descriptor for it. The file descriptor is set
- * CLOEXEC. The file is immediately suitable for mmap()'ing
- * the given size at offset zero.
- *
- * The file should not have a permanent backing store like a disk,
- * but may have if XDG_RUNTIME_DIR is not properly implemented in OS.
- *
- * The file name is deleted from the file system.
- *
- * The file is suitable for buffer sharing between processes by
- * transmitting the file descriptor over Unix sockets using the
- * SCM_RIGHTS methods.
- *
- * If the C library implements posix_fallocate(), it is used to
- * guarantee that disk space is available for the file at the
- * given size. If disk space is insufficient, errno is set to ENOSPC.
- * If posix_fallocate() is not supported, program may receive
- * SIGBUS on accessing mmap()'ed file contents instead.
- *
- * If the C library implements memfd_create(), it is used to create the
- * file purely in memory, without any backing file name on the file
- * system, and then sealing off the possibility of shrinking it.  This
- * can then be checked before accessing mmap()'ed file contents, to
- * make sure SIGBUS can't happen.  It also avoids requiring
- * XDG_RUNTIME_DIR.
- */
-int
-os_create_anonymous_file(off_t size)
-{
-	static const char template[] = "/wayland-cursor-shared-XXXXXX";
-	const char *path;
-	char *name;
-	size_t name_size;
-	int fd;
-
-#ifdef HAVE_MEMFD_CREATE
-	fd = memfd_create("wayland-cursor", MFD_CLOEXEC | MFD_ALLOW_SEALING);
-	if (fd >= 0) {
-		/* We can add this seal before calling posix_fallocate(), as
-		 * the file is currently zero-sized anyway.
-		 *
-		 * There is also no need to check for the return value, we
-		 * couldn't do anything with it anyway.
-		 */
-		fcntl(fd, F_ADD_SEALS, F_SEAL_SHRINK | F_SEAL_SEAL);
-	} else
-#endif
-	{
-		path = getenv("XDG_RUNTIME_DIR");
-		if (!path || path[0] != '/') {
-			errno = ENOENT;
-			return -1;
-		}
-
-		name_size = strlen(path) + sizeof(template);
-		name = malloc(name_size);
-		if (!name)
-			return -1;
-
-		snprintf(name, name_size, "%s%s", path, template);
-
-		fd = create_tmpfile_cloexec(name);
-
-		free(name);
-
-		if (fd < 0)
-			return -1;
-	}
-
-	if (os_resize_anonymous_file(fd, size) < 0) {
-		close(fd);
-		return -1;
-	}
-
-	return fd;
-}
-
-int
-os_resize_anonymous_file(int fd, off_t size)
-{
-#ifdef HAVE_POSIX_FALLOCATE
-	sigset_t mask;
-	sigset_t old_mask;
-
-	/*
-	 * posix_fallocate() might be interrupted, so we need to check
-	 * for EINTR and retry in that case.
-	 * However, in the presence of an alarm, the interrupt may trigger
-	 * repeatedly and prevent a large posix_fallocate() to ever complete
-	 * successfully, so we need to first block SIGALRM to prevent
-	 * this.
-	 */
-	sigemptyset(&mask);
-	sigaddset(&mask, SIGALRM);
-	sigprocmask(SIG_BLOCK, &mask, &old_mask);
-	/*
-	 * Filesystems that do not support fallocate will return EINVAL or
-	 * EOPNOTSUPP. In this case we need to fall back to ftruncate
-	 */
-	do {
-		errno = posix_fallocate(fd, 0, size);
-	} while (errno == EINTR);
-	sigprocmask(SIG_SETMASK, &old_mask, NULL);
-	if (errno == 0)
-		return 0;
-	else if (errno != EINVAL && errno != EOPNOTSUPP)
-		return -1;
-#endif
-	if (ftruncate(fd, size) < 0)
-		return -1;
-
-	return 0;
-}
diff --git a/cursor/os-compatibility.h b/cursor/os-compatibility.h
index fdfeb78..e334904 100644
--- a/cursor/os-compatibility.h
+++ b/cursor/os-compatibility.h
@@ -23,15 +23,179 @@
  * SOFTWARE.
  */
 
-#ifndef OS_COMPATIBILITY_H
-#define OS_COMPATIBILITY_H
+#define _GNU_SOURCE
+
+#include "config.h"
 
 #include <sys/types.h>
+#include <unistd.h>
+#include <fcntl.h>
+#include <errno.h>
+#include <signal.h>
+#include <string.h>
+#include <stdio.h>
+#include <stdlib.h>
+
+#ifdef HAVE_MEMFD_CREATE
+#include <sys/mman.h>
+#endif
+
+#ifndef HAVE_MKOSTEMP
+static int
+set_cloexec_or_close(int fd)
+{
+	long flags;
+
+	if (fd == -1)
+		return -1;
+
+	flags = fcntl(fd, F_GETFD);
+	if (flags == -1)
+		goto err;
+
+	if (fcntl(fd, F_SETFD, flags | FD_CLOEXEC) == -1)
+		goto err;
+
+	return fd;
+
+err:
+	close(fd);
+	return -1;
+}
+#endif
+
+static int
+create_tmpfile_cloexec(char *tmpname)
+{
+	int fd;
+
+#ifdef HAVE_MKOSTEMP
+	fd = mkostemp(tmpname, O_CLOEXEC);
+	if (fd >= 0)
+		unlink(tmpname);
+#else
+	fd = mkstemp(tmpname);
+	if (fd >= 0) {
+		fd = set_cloexec_or_close(fd);
+		unlink(tmpname);
+	}
+#endif
+
+	return fd;
+}
+
+inline int
+os_resize_anonymous_file(int fd, off_t size)
+{
+#ifdef HAVE_POSIX_FALLOCATE
+    sigset_t mask;
+	sigset_t old_mask;
+
+	/*
+	 * posix_fallocate() might be interrupted, so we need to check
+	 * for EINTR and retry in that case.
+	 * However, in the presence of an alarm, the interrupt may trigger
+	 * repeatedly and prevent a large posix_fallocate() to ever complete
+	 * successfully, so we need to first block SIGALRM to prevent
+	 * this.
+	 */
+	sigemptyset(&mask);
+	sigaddset(&mask, SIGALRM);
+	sigprocmask(SIG_BLOCK, &mask, &old_mask);
+	/*
+	 * Filesystems that do not support fallocate will return EINVAL or
+	 * EOPNOTSUPP. In this case we need to fall back to ftruncate
+	 */
+	do {
+		errno = posix_fallocate(fd, 0, size);
+	} while (errno == EINTR);
+	sigprocmask(SIG_SETMASK, &old_mask, NULL);
+	if (errno == 0)
+		return 0;
+	else if (errno != EINVAL && errno != EOPNOTSUPP)
+		return -1;
+#endif
+    if (ftruncate(fd, size) < 0)
+        return -1;
+
+    return 0;
+}
+
+/*
+ * Create a new, unique, anonymous file of the given size, and
+ * return the file descriptor for it. The file descriptor is set
+ * CLOEXEC. The file is immediately suitable for mmap()'ing
+ * the given size at offset zero.
+ *
+ * The file should not have a permanent backing store like a disk,
+ * but may have if XDG_RUNTIME_DIR is not properly implemented in OS.
+ *
+ * The file name is deleted from the file system.
+ *
+ * The file is suitable for buffer sharing between processes by
+ * transmitting the file descriptor over Unix sockets using the
+ * SCM_RIGHTS methods.
+ *
+ * If the C library implements posix_fallocate(), it is used to
+ * guarantee that disk space is available for the file at the
+ * given size. If disk space is insufficient, errno is set to ENOSPC.
+ * If posix_fallocate() is not supported, program may receive
+ * SIGBUS on accessing mmap()'ed file contents instead.
+ *
+ * If the C library implements memfd_create(), it is used to create the
+ * file purely in memory, without any backing file name on the file
+ * system, and then sealing off the possibility of shrinking it.  This
+ * can then be checked before accessing mmap()'ed file contents, to
+ * make sure SIGBUS can't happen.  It also avoids requiring
+ * XDG_RUNTIME_DIR.
+ */
+inline int
+os_create_anonymous_file(off_t size)
+{
+	static const char template[] = "/wayland-cursor-shared-XXXXXX";
+	const char *path;
+	char *name;
+	size_t name_size;
+	int fd;
+
+#ifdef HAVE_MEMFD_CREATE
+	fd = memfd_create("wayland-cursor", MFD_CLOEXEC | MFD_ALLOW_SEALING);
+	if (fd >= 0) {
+		/* We can add this seal before calling posix_fallocate(), as
+		 * the file is currently zero-sized anyway.
+		 *
+		 * There is also no need to check for the return value, we
+		 * couldn't do anything with it anyway.
+		 */
+		fcntl(fd, F_ADD_SEALS, F_SEAL_SHRINK | F_SEAL_SEAL);
+	} else
+#endif
+	{
+		path = getenv("XDG_RUNTIME_DIR");
+		if (!path || path[0] != '/') {
+			errno = ENOENT;
+			return -1;
+		}
+
+		name_size = strlen(path) + sizeof(template);
+		name = malloc(name_size);
+		if (!name)
+			return -1;
+
+		snprintf(name, name_size, "%s%s", path, template);
+
+		fd = create_tmpfile_cloexec(name);
+
+		free(name);
 
-int
-os_create_anonymous_file(off_t size);
+		if (fd < 0)
+			return -1;
+	}
 
-int
-os_resize_anonymous_file(int fd, off_t size);
+	if (os_resize_anonymous_file(fd, size) < 0) {
+		close(fd);
+		return -1;
+	}
 
-#endif /* OS_COMPATIBILITY_H */
+	return fd;
+}
diff --git a/meson.build b/meson.build
index 558c7ac..86a2ed1 100644
--- a/meson.build
+++ b/meson.build
@@ -80,8 +80,6 @@ if get_option('libraries')
 	ffi_dep = dependency('libffi')
 
 	decls = [
-		{ 'header': 'sys/signalfd.h', 'symbol': 'SFD_CLOEXEC' },
-		{ 'header': 'sys/timerfd.h', 'symbol': 'TFD_CLOEXEC' },
 		{ 'header': 'time.h', 'symbol': 'CLOCK_MONOTONIC' },
 	]
 
diff --git a/src/meson.build b/src/meson.build
index a8a1d2b..bdbd587 100644
--- a/src/meson.build
+++ b/src/meson.build
@@ -105,16 +105,6 @@ if get_option('libraries')
 	)
 
 	generated_headers = [
-		{
-			'scanner_args': ['server-header'],
-			'output': 'wayland-server-protocol.h',
-			'install': true,
-		},
-		{
-			'scanner_args': ['server-header', '-c'],
-			'output': 'wayland-server-protocol-core.h',
-			'install': false,
-		},
 		{
 			'scanner_args': ['client-header'],
 			'output': 'wayland-client-protocol.h',
@@ -164,59 +154,7 @@ if get_option('libraries')
 		# is an ABI break, at which point we should probably bump the SONAME of
 		# all libraries to .so.2. For more details see
 		# https://gitlab.freedesktop.org/wayland/wayland/-/merge_requests/177
-		error('We probably need to bump the SONAME of libwayland-server and -client')
-	endif
-
-	wayland_server = library(
-		'wayland-server',
-		sources: [
-			wayland_server_protocol_core_h,
-			wayland_server_protocol_h,
-			wayland_protocol_c,
-			'wayland-server.c',
-			'wayland-shm.c',
-			'event-loop.c'
-		],
-		# To avoid an unnecessary SONAME bump, wayland 1.x.y produces
-		# libwayland-server.so.0.x.y.
-		version: '.'.join(['0', wayland_version[1], wayland_version[2]]),
-		dependencies: [
-			epoll_dep,
-			ffi_dep,
-			wayland_private_dep,
-			wayland_util_dep,
-			mathlib_dep,
-			threads_dep,
-			rt_dep
-		],
-		include_directories: root_inc,
-		install: true
-	)
-
-	wayland_server_dep = declare_dependency(
-		link_with: wayland_server,
-		include_directories: [ root_inc, include_directories('.') ],
-		dependencies: [ epoll_dep, ffi_dep, mathlib_dep, threads_dep ],
-		sources: [
-			wayland_server_protocol_core_h,
-			wayland_server_protocol_h
-		]
-	)
-
-	pkgconfig.generate(
-		wayland_server,
-		name: 'Wayland Server',
-		description: 'Server side implementation of the Wayland protocol',
-		version: meson.project_version(),
-		filebase: 'wayland-server',
-		variables: [
-			'datarootdir=' + join_paths('${prefix}', get_option('datadir')),
-			'pkgdatadir=' + join_paths('${datarootdir}', meson.project_name())
-		]
-	)
-
-	if meson.version().version_compare('>= 0.54.0')
-		meson.override_dependency('wayland-server', wayland_server_dep)
+		error('We probably need to bump the SONAME of libwayland-client')
 	endif
 
 	wayland_client = library(
@@ -269,8 +207,6 @@ if get_option('libraries')
 
 	install_headers([
 		'wayland-util.h',
-		'wayland-server.h',
-		'wayland-server-core.h',
 		'wayland-client.h',
 		'wayland-client-core.h',
 	])
diff --git a/src/wayland-os.c b/src/wayland-os.c
index a9066ca..a5526d3 100644
--- a/src/wayland-os.c
+++ b/src/wayland-os.c
@@ -33,7 +33,9 @@
 #include <fcntl.h>
 #include <errno.h>
 #include <string.h>
+#ifndef __EMSCRIPTEN__
 #include <sys/epoll.h>
+#endif
 #include <sys/mman.h>
 #include <sys/un.h>
 #ifdef HAVE_SYS_UCRED_H
@@ -79,6 +81,7 @@ wl_os_socket_cloexec(int domain, int type, int protocol)
 	return set_cloexec_or_close(fd);
 }
 
+#ifndef __EMSCRIPTEN__
 #if defined(__FreeBSD__)
 int
 wl_os_socket_peercred(int sockfd, uid_t *uid, gid_t *gid, pid_t *pid)
@@ -118,6 +121,7 @@ wl_os_socket_peercred(int sockfd, uid_t *uid, gid_t *gid, pid_t *pid)
 #else
 #error "Don't know how to read ucred on this platform"
 #endif
+#endif
 
 int
 wl_os_dupfd_cloexec(int fd, int minfd)
@@ -188,6 +192,7 @@ wl_os_recvmsg_cloexec(int sockfd, struct msghdr *msg, int flags)
 	return recvmsg_cloexec_fallback(sockfd, msg, flags);
 }
 
+#ifndef __EMSCRIPTEN__
 int
 wl_os_epoll_create_cloexec(void)
 {
@@ -250,3 +255,4 @@ wl_os_mremap_maymove(int fd, void *old_data, ssize_t *old_size,
 
 	return result;
 }
+#endif
diff --git a/src/wayland-os.h b/src/wayland-os.h
index 068fd2f..39acc4b 100644
--- a/src/wayland-os.h
+++ b/src/wayland-os.h
@@ -32,8 +32,10 @@
 int
 wl_os_socket_cloexec(int domain, int type, int protocol);
 
+#ifndef __EMSCRIPTEN__
 int
 wl_os_socket_peercred(int sockfd, uid_t *uid, gid_t *gid, pid_t *pid);
+#endif
 
 int
 wl_os_dupfd_cloexec(int fd, int minfd);
@@ -41,6 +43,7 @@ wl_os_dupfd_cloexec(int fd, int minfd);
 ssize_t
 wl_os_recvmsg_cloexec(int sockfd, struct msghdr *msg, int flags);
 
+#ifndef __EMSCRIPTEN__
 int
 wl_os_epoll_create_cloexec(void);
 
@@ -50,7 +53,7 @@ wl_os_accept_cloexec(int sockfd, struct sockaddr *addr, socklen_t *addrlen);
 void *
 wl_os_mremap_maymove(int fd, void *old_data, ssize_t *old_size,
 		     ssize_t new_size, int prot, int flags);
-
+#endif
 
 /*
  * The following are for wayland-os.c and the unit tests.
