#Uncomment nvidia related comments below if you want hw acceleration with an nvidia GPU to work inside the containers (requires nvidia container runtime).
#Also make sure to configure "/dev/dri/renderD12x" and "/dev/dri/cardx" entries in this file to point to the correct GPU if you have a multi GPU setup.
#The compositor-proxy-cli command also needs to point to the correct GPU.
services:
  compositor-proxy-cli:
#    runtime: nvidia
    build:
      context: ../..
      dockerfile: docker/Dockerfile
    command:
#      - --encoder=nvh264
      - --applications=applications.json
      - --render-device=/dev/dri/renderD128
    privileged: false
    user: "1000:1000"
    ipc: host
    read_only: false
    volumes:
      - xdg-runtime-dir:/xdg-runtime-dir
      - x11-unix:/tmp/.X11-unix
      - ${PWD}/docker-compose-applications.json:/app/docker-compose-applications.json
      - /dev/dri/renderD128:/dev/dri/renderD128:rw
      - /dev/dri/card0:/dev/dri/card0:rw
    devices:
      - /dev/dri/renderD128:/dev/dri/renderD128
      - /dev/dri/card0:/dev/dri/card0
    ports:
      - "8081:8081/tcp"
    environment:
      XDG_RUNTIME_DIR: /xdg-runtime-dir
      XAUTHORITY: /tmp/.X11-unix/Xauthority
#      NVIDIA_VISIBLE_DEVICES: all
#      NVIDIA_DRIVER_CAPABILITIES: all
  gtk3-demo:
#    runtime: nvidia
    pid: 'service:compositor-proxy-cli'
    build:
      context: gtk3-demo
      dockerfile: Dockerfile
    privileged: false
    user: "1000:1000"
    volumes:
      - xdg-runtime-dir:/xdg-runtime-dir
      - /dev/dri/renderD128:/dev/dri/renderD128:rw
    devices:
      - /dev/dri/renderD128:/dev/dri/renderD128
    environment:
      XDG_RUNTIME_DIR: /xdg-runtime-dir
#      NVIDIA_VISIBLE_DEVICES: all
#      NVIDIA_DRIVER_CAPABILITIES: all
    restart: always
  gtk4-demo:
#    runtime: nvidia
    pid: 'service:compositor-proxy-cli'
    build:
      context: gtk4-demo
      dockerfile: Dockerfile
    privileged: false
    user: "1000:1000"
    volumes:
      - xdg-runtime-dir:/xdg-runtime-dir
      - /dev/dri/renderD128:/dev/dri/renderD128:rw
    devices:
      - /dev/dri/renderD128:/dev/dri/renderD128
    environment:
      XDG_RUNTIME_DIR: /xdg-runtime-dir
#      NVIDIA_VISIBLE_DEVICES: all
#      NVIDIA_DRIVER_CAPABILITIES: all
    restart: always
  alacritty:
#    runtime: nvidia
    pid: 'service:compositor-proxy-cli'
    build:
      context: alacritty
      dockerfile: Dockerfile
    privileged: false
    user: "1000:1000"
    volumes:
      - xdg-runtime-dir:/xdg-runtime-dir
      - /dev/dri/renderD128:/dev/dri/renderD128:rw
    devices:
      - /dev/dri/renderD128:/dev/dri/renderD128
    environment:
      WAYLAND_DISPLAY: wayland-0
      XDG_RUNTIME_DIR: /xdg-runtime-dir
#      NVIDIA_VISIBLE_DEVICES: all
#      NVIDIA_DRIVER_CAPABILITIES: all
    restart: always
  xterm:
#    runtime: nvidia
    pid: 'service:compositor-proxy-cli'
    build:
      context: xterm
      dockerfile: Dockerfile
    privileged: false
    user: "1000:1000"
    volumes:
      - xdg-runtime-dir:/xdg-runtime-dir
      - x11-unix:/tmp/.X11-unix
      - /dev/dri/renderD128:/dev/dri/renderD128:rw
    devices:
      - /dev/dri/renderD128:/dev/dri/renderD128
    environment:
      XAUTHORITY: /tmp/.X11-unix/Xauthority
      XDG_RUNTIME_DIR: /xdg-runtime-dir
      DISPLAY: ':1'
#      NVIDIA_VISIBLE_DEVICES: all
#      NVIDIA_DRIVER_CAPABILITIES: all
    restart: always
  glxgears:
#    runtime: nvidia
    pid: 'service:compositor-proxy-cli'
    build:
      context: glxgears
      dockerfile: Dockerfile
    ipc: host
    privileged: false
    user: "1000:1000"
    volumes:
      - xdg-runtime-dir:/xdg-runtime-dir
      - x11-unix:/tmp/.X11-unix
      - /dev/dri/renderD128:/dev/dri/renderD128:rw
    devices:
      - /dev/dri/renderD128:/dev/dri/renderD128
    environment:
      XAUTHORITY: /tmp/.X11-unix/Xauthority
      XDG_RUNTIME_DIR: /xdg-runtime-dir
      DISPLAY: ':1'
#      NVIDIA_VISIBLE_DEVICES: all
#      NVIDIA_DRIVER_CAPABILITIES: all
    restart: always
volumes:
  xdg-runtime-dir:
    driver_opts:
      type: tmpfs
      device: tmpfs
  x11-unix:
    driver_opts:
      type: tmpfs
      device: tmpfs
